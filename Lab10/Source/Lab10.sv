
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module Lab10(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// Seg7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// ADC //////////
	output		          		ADC_CONVST,
	output		          		ADC_DIN,
	input 		          		ADC_DOUT,
	output		          		ADC_SCLK
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

logic [4:0] cnt;
logic reset_n;
logic ext_reset_n;
logic pll_locked;
logic clk_gate;
logic locked;
logic ADC_CONVST_L,ADC_DIN_L,ADC_CLK,ADC_DOUT_L;
logic SCLK;
logic [11:0]SDI,SDO,data;

logic [15:0] bcd_out;
assign ADC_CLK = clk_gate & SCLK;
assign ADC_CONVST = ADC_CONVST_L;
assign ADC_SCLK = ADC_CLK;
assign ADC_DIN = ADC_DIN_L;
assign ext_reset_n = KEY[0];
//=======================================================
//  Structural coding
//=======================================================
adc_pll U0 (.refclk(CLOCK_50),.rst(1'b0),.outclk_0(SCLK),.locked);
reset U1 (.clock(CLOCK_50),.ext_reset_n,.pll_locked(1'b1),.reset_n);
bin2bcd U2 (.binary_in(data),.bcd_out);

decoder H5(.birth(4'b1111),.HEX(HEX5));
decoder H4(.birth(4'b1111),.HEX(HEX4));
decoder H3(.birth(bcd_out[15:12]),.HEX(HEX3));
decoder H2(.birth(bcd_out[11:8]),.HEX(HEX2));
decoder H1(.birth(bcd_out[7:4]),.HEX(HEX1));
decoder H0(.birth(bcd_out[3:0]),.HEX(HEX0));
always @(SW[2:0]) begin
	case(SW[2:0])
	3'b000:SDI = 12'b1000_1000_0000;//0
	3'b001:SDI = 12'b1100_1000_0000;//1
	3'b010:SDI = 12'b1001_1000_0000;//2
	3'b011:SDI = 12'b1101_1000_0000;//3
	3'b100:SDI = 12'b1010_1000_0000;//4
	3'b101:SDI = 12'b1110_1000_0000;//5
	3'b110:SDI = 12'b1011_1000_0000;//6
	3'b111:SDI = 12'b1111_1000_0000;//7
	default SDI = 12'b1000_1000_0000;
	endcase
end
always @(posedge SCLK) begin
	if(ADC_CONVST == 1)begin
		data <= SDO;
	end
	
end

always_ff @(posedge SCLK, negedge reset_n) begin
	if(reset_n == 0) begin
		cnt <= 0;
	end
	else if (cnt == 15) begin
		cnt<= 0;
	end
	else begin
		cnt<= cnt+1;
	end

	
end
always_ff @(negedge SCLK) begin
	if(cnt >= 3  & cnt < 15)begin
		clk_gate <=1;
	end
	else begin
		clk_gate <=0;
	end

end


always_ff @( posedge SCLK , negedge reset_n) begin 
	if(reset_n == 0)begin
		ADC_CONVST_L <= 0;
		
	end
	else if (cnt == 0) begin
		ADC_CONVST_L <= 1;
		
	end
	else if( cnt == 1)begin
		ADC_CONVST_L <= 1;
		
	end
	else if (cnt == 2) begin
		ADC_CONVST_L <= 0;
		
	end	
	else if (cnt == 3 ) begin
		ADC_DIN_L <= SDI[11];
		SDO[11] <= ADC_DOUT;		
	end
	else if (cnt == 4 ) begin
		ADC_DIN_L <= SDI[10];
		SDO[10] <= ADC_DOUT;
	end
	else if (cnt == 5 ) begin
		ADC_DIN_L <= SDI[9];
		SDO[9] <= ADC_DOUT;
	end
	else if (cnt == 6 ) begin
		ADC_DIN_L <= SDI[8];
		SDO[8] <= ADC_DOUT;
	end
	else if (cnt == 7 ) begin
		ADC_DIN_L <= SDI[7];
		SDO[7] <= ADC_DOUT;
	end
	else if (cnt == 8 ) begin
		ADC_DIN_L <= SDI[6];
		SDO[6] <= ADC_DOUT;
	end
	else if (cnt == 9 ) begin
		
		SDO[5] <= ADC_DOUT;
	end
	else if (cnt == 10 ) begin
		
		SDO[4] <= ADC_DOUT;
	end
	else if (cnt == 11 ) begin
		
		SDO[3] <= ADC_DOUT;
	end
	else if (cnt == 12 ) begin
		
		SDO[2] <= ADC_DOUT;
	end
	else if (cnt == 13 ) begin
		
		SDO[1] <= ADC_DOUT;
	end
	else if (cnt == 14 ) begin
		SDO[0] <= ADC_DOUT;
		
	end
	else if (cnt == 15 ) begin
		ADC_CONVST_L <= 0;
	end

end

endmodule
